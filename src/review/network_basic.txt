1. DNS: 把域名转IP地址
    域名系统是分层次的，一些DNS服务器位于顶层，查询域名时,路由或者ISP提供连接DNS服务器的信息。
    较低层的DNS服务器缓存映射。

2. CDN：内容分发网络
    内容分发网络是全球性的代理服务器分布式网络，它从靠近用户的位置提供内容。

常见状态码：
    2xx：表示成功的处理了请求的状态码
    200：成功，服务器成功处理了请求，通常表示服务器提供了请求的网页
    201：已创建，请求成功并且服务器成功创建了资源
    202：已接受，服务器已经接受请求，但尚未处理
    203：非授权信息，服务器已成功处理了请求，但返回的信息可能来自另一个来源
    204：无内容，服务器成功处理了请求，但没有返回任何内容
    205：重置内容， 服务器成功处理了请求，但没有返回任何内容
    206：部分内容，服务器成功处理了部分GET请求

    3xx: (重定向) 表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。代码 说明
    300 (多种选择) 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。
    301 (永久移动) 请求的网页已永久移动到新位置。 服务器返回此响应(对 GET 或 HEAD 请求的响应)时，会自动将请求者转到新位置。
    302 (临时移动) 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。
    303 (查看其他位置) 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。
    304 (未修改) 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。
    305 (使用代理) 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。
    307 (临时重定向) 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。

    4xx：(请求错误) 这些状态代码表示请求可能出错，妨碍了服务器的处理。代码 说明
    400 (错误请求) 服务器不理解请求的语法。
    401 (未授权) 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。
    403 (禁止) 服务器拒绝请求。
    404 (未找到) 服务器找不到请求的网页。
    405 (方法禁用) 禁用请求中指定的方法。NOT ALLOW METHOD
    406 (不接受) 无法使用请求的内容特性响应请求的网页
    407 (需要代理授权) 此状态代码与 401(未授权)类似，但指定请求者应当授权使用代理。
    408 (请求超时) 服务器等候请求时发生超时。
    409 (冲突) 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。
    410 (已删除) 如果请求的资源已永久删除，服务器就会返回此响应。
    411 (需要有效长度) 服务器不接受不含有效内容长度标头字段的请求。
    412 (未满足前提条件) 服务器未满足请求者在请求中设置的其中一个前提条件。
    413 (请求实体过大) 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。
    414 (请求的 URI 过长) 请求的 URI(通常为网址)过长，服务器无法处理。
    415 (不支持的媒体类型) 请求的格式不受请求页面的支持。
    416 (请求范围不符合要求) 如果页面无法提供请求的范围，则服务器会返回此状态代码。
    417 (未满足期望值) 服务器未满足"期望"请求标头字段的要求。

    5xx(服务器错误)这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。代码 说明
    500 (服务器内部错误) 服务器遇到错误，无法完成请求。
    501 (尚未实施) 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。
    502 (错误网关) 服务器作为网关或代理，从上游服务器收到无效响应。
    503 (服务不可用) 服务器目前无法使用(由于超载或停机维护)。 通常，这只是暂时状态。
    504 (网关超时) 服务器作为网关或代理，但是没有及时从上游服务器收到请求。
    505 (HTTP 版本不受支持) 服务器不支持请求中所用的 HTTP 协议版本。

请求方法：
    GET：GET请求会显示请求指定的资源。一般来说GET方法应该只用于数据的读取，而不应当用于会产生副作用的非幂等的操作中。
    HEAD：HEAD方法与GET方法一样，都是向服务器发出指定资源的请求。但是，服务器在响应HEAD请求时不会回传资源的内容部分，即：响应主体。这样，我们可以不传输全部内容的情况下，就可以获取服务器的响应头信息。HEAD方法常被用于客户端查看服务器的性能。
    POST：POST请求会 向指定资源提交数据，请求服务器进行处理，如：表单数据提交、文件上传等，请求数据会被包含在请求体中。POST方法是非幂等的方法，因为这个请求可能会创建新的资源或/和修改现有资源。
    PUT：PUT请求会身向指定资源位置上传其最新内容，PUT方法是幂等的方法。通过该方法客户端可以将指定资源的最新数据传送给服务器取代指定的资源的内容。
    DELETE：DELETE请求用于请求服务器删除所请求URI（统一资源标识符，Uniform Resource Identifier）所标识的资源。DELETE请求后指定资源会被删除，DELETE方法也是幂等的。
    CONNECT：CONNECT方法是HTTP/1.1协议预留的，能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接与非加密的HTTP代理服务器的通信。
    OPTIONS：OPTIONS请求与HEAD类似，一般也是用于客户端查看服务器的性能。 这个方法会请求服务器返回该资源所支持的所有HTTP请求方法，该方法会用'*'来代替资源名称，向服务器发送OPTIONS请求，可以测试服务器功能是否正常。JavaScript的XMLHttpRequest对象进行CORS跨域资源共享时，就是使用OPTIONS方法发送嗅探请求，以判断是否有对指定资源的访问权限。
    TRACE：TRACE请求服务器回显其收到的请求信息，该方法主要用于HTTP请求的测试或诊断。
    PATCH：PATCH方法出现的较晚，它在2010年的RFC 5789标准中被定义。PATCH请求与PUT请求类似，同样用于资源的更新。二者有以下两点不同：
        1.但PATCH一般用于资源的部分更新，而PUT一般用于资源的整体更新。
        2.当资源不存在时，PATCH会创建一个新的资源，而PUT只会对已在资源进行更新。

 POST 用于向服务器发送数据。PUT 用于向服务器上的资源(例如文件)中存储数据。

