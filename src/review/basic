python 解释器
    pyc文件是将py文件的解释结果保存下来的文件
    note:
        1.对于当前调用的主程序不会生成pyc文件；
        2.以import xxx或from xxx import xxx等方式导入主程序的模块才会生成pyc文件；
        3.每次使用pyc文件时，都会根据pyc文件的创建时间和源模块进行对比，如果源模块有修改，则重新创建pyc文件，并覆盖先前的pyc文件，如果没有修改，直接使用pyc文件代替模块；
        4.pyc文件统一保存在模块所在目录的__pycache__文件夹内。


bytes.decode("解码类型")    将bytes对象解码成字符串，默认使用utf-8进行解码
str.encode("编码类型")      利用字符串的encode方法编码成bytes，默认为utf-8类型

变量的作用域查找：
    局部查找 -> 局部外的闭包查找 -> 全局查找

函数具有调用时才查找变量的特性。在你没调用它之前，它不会保存也不关心它内部变量的具体值。只有等到你调用它的时候，它才逐一去找这些变量的具体值。


使用yield返回的函数会变成一个生成器（generator）。 在调用生成器的过程中，每次遇到yield时函数会暂停并保存当前所有的运行信息，
返回yield的值。并在下一次执行next()方法时从当前位置继续运行。



def outer(func):
    def inner():
        print("我是内层函数！")
    return inner

def foo():
    print("我是原始函数！")

outer(foo)
outer(foo())

函数名加括号：对函数进行调用，比如foo()、outer(foo)

函数名作为参数： outer(foo)中的foo本身是个函数，但作为参数被传递给了outer函数

函数名加括号被当做参数：其实就是先调用函数，再将它的返回值当做别的函数的参数，例如outer(foo())

返回函数名：return inner

返回函数名加括号：return inner()，其实就是先执行inner函数，再将其返回值作为别的函数的返回值

装饰器的语法规则。规则是：
    被装饰的函数的名字会被当作参数传递给装饰函数。装饰函数执行它自己内部的代码后，会将它的返回值赋值给被装饰的函数。

def outer(func):
    def inner(*args,**kwargs):
        print("认证成功！")
        result = func(*args,**kwargs)
        print("日志添加成功")
        return result
    return inner

@outer
def f1(name,age):
    print("%s 正在连接业务部门1数据接口......"%name)

1.从上到下执行，outer函数不会执行，但是会加载到内存中
2.遇到装饰器@outer会执行


一些内置函数:
ascii(): 调用对象的__repr__()方法
any():接收一个可迭代对象，如果迭代对象里有一个元素的bool运算值是True，那么返回True，否则False。
all():接收一个可迭代对象，如果对象里的所有元素的bool运算值都是True，那么返回True，否则False。
bin()、oct()、hex():三个函数是将十进制数分别转换为2/8/16进制。
bytes():将对象转换成字节类型
str():将对象转换成字符串类型，同样也可以指定编码方式。例如：str(bytes对象，encoding='utf-8')
callable():判断对象是否可以被调用。如果某个对象具有__call__方法，那它就能被调用。
chr():返回某个十进制数对应的ASCII字符，例如：chr(99) = ‘c’。
ord():与chr()相反，返回某个ASCII字符对应的十进制数，例如，ord('A') = 65
dir():显示对象所有的属性和方法。最棒的辅助函数之一！
divmod():除法，同时返回商和余数的元组。
enumerate():枚举函数，在迭代对象的时候，额外提供一个序列号的输出。
eval():将字符串直接解读并执行。例如：s = "6*8"，s是一个字符串，d = eval(s)， d的结果是48。
format():执行format()，其实就是调用该对象所属类的__format__方法。类似print功能。
frozenset():返回一个不能增加和修改的集合类型对象。
globals():列出当前环境下所有的全局变量。注意要与global关键字区分！
locals():返回当前可用的局部变量。
hash():为不可变对象，例如字符串生成哈希值的函数！
help():返回对象的帮助文档。谁用谁知道！
id():返回对象的内存地址,常用来查看变量引用的变化，对象是否相同等。常用功能之一！
input():接收用户输入，返回一个输入的字符串
isinstance():判断一个对象是否是某个类的实例。比type()方法适用面更广
issubclass():issubclass(a，b),判断a是否是b的子类。
iter():制造一个迭代器，使其具备next()能力。
len():返回对象的长度。不能再常用的函数之一了。
max()/min():返回给定集合里的最大或者最小的元素。可以指定排序的方法！
memoryview(obj):返回obj的内存视图对象。obj只能是bytes或bytesarray类型。
next():通过调用迭代器的__next__()方法，获取下一个元素。
object():该方法不接收任何参数，返回一个没有任何功能的对象。object是Python所有类的基类。
open():打开文件的方法。
pow():幂函数。
range():没错，这是Python内置的函数
repr():调用对象所属类的__repr__方法，与print功能类似
reversed():反转，逆序对象
round():四舍五入．
slice():返回一个切片类型的对象。
super():调用父类。面向对象中类的机制相关
type():显示对象所属的数据类型。常用方法！
vars():与dir()方法类似，不过dir()方法返回的是key，vars()方法返回key的同时还把value一起打印了。
map():使用格式：obj = map(func, iterable),func是某个函数名，iterable是一个可迭代对象。
filter():过滤器，用法和map类似。在函数中设定过滤的条件，逐一循环对象中的元素，将返回值为True时的元素留下
zip():组合对象。将对象逐一配对。对象的长度不一致,多余的会被抛弃！以最短的为基础！
sorted():排序方法。有key和reverse两个重要参数。

面向对象：
    实例变量：定义在实例中的变量，只作用于当前实例。
    类变量：类变量是所有实例公有的变量。类变量定义在类中，但在方法体之外。
    方法：类中定义的函数。
    静态方法：不需要实例化就可以由类执行的方法
    类方法：类方法是将类本身作为对象进行操作的方法。

使用实例变量和类变量的时候一定要注意，使用类似zhang.name访问变量的时候，实例会先在自己的实例变量列表里查找是否有这个实例变量，
如果没有，那么它就会去类变量列表里找，如果还没有，弹出异常。


Python3的继承机制:
    子类在调用某个方法或变量的时候，首先在自己内部查找，如果没有找到，则开始根据继承机制在父类里查找。
    根据父类定义中的顺序，以深度优先的方式逐一查找父类！
    当继承继承的所有父类都有共有的父类时，以最以后一个父类的父类结果为准


类的成员与下划线总结：
    _name、_name_、_name__:建议性的私有成员，不要在外部访问。
    __name、 __name_ :强制的私有成员，但是你依然可以蛮横地在外部危险访问。
    __name__:特殊成员，与私有性质无关，例如__doc__。
    name_、name__:没有任何特殊性，普通的标识符，但最好不要这么起名。


只读属性：
    只针对某个实例变量设置@property，不设置prop.setter就是只读属性

特殊成员和魔法方法
     __doc__:说明性文档和信息。Python自建，无需自定义
     __init__():实例化方法，通过类创建实例时，自动触发执行
     __module__:表示当前操作的对象在属于哪个模块,内建，无需自定义
     __class__:表示当前操作的对象属于哪个类,内建，无需自定义
     __del__():析构方法，当对象在内存中被释放时，自动触发此方法。析构函数的调用是由解释器在进行垃圾回收时自动触发执行的。
     __call__():如果为一个类编写了该方法，那么在该类的实例后面加括号，可会调用这个方法。
                构造方法的执行是由类加括号执行的，即：对象 = 类名()，而对于__call__() 方法，是由对象后加括号触发的，即：对象() 或者 类()()
     __dict__:列出类或对象中的所有成员！非常重要和有用的一个属性，Python自建，无需用户自己定义。
     __str__():如果一个类中定义了__str__()方法，那么在打印对象时，默认输出该方法的返回值。这也是一个非常重要的方法，需要用户自己定义。
     __getitem__():a = 标识符[]　： 　　执行__getitem__方法
     __setitem__():标识符[] = a  ： 　　执行__setitem__方法
     __delitem__():del 标识符[]　： 　　执行__delitem__方法
     __iter__():用户想让自定义的类的对象可以被迭代，那么就需要在类中定义这个方法，并且让该方法的返回值是一个可迭代的对象
     __len__():调用内置的len()函数试图获取一个对象的长度，在后台，其实是去调用该对象的__len__()方法
     __repr__():这个方法的作用和__str__()很像，两者的区别是__str__()返回用户看到的字符串，而__repr__()返回程序开发者看到的字符串，也就是说，__repr__()是为调试服务的。通常两者代码一样
     __add__: 加运算
     __sub__: 减运算
     __mul__: 乘运算
     __div__: 除运算
     __mod__: 求余运算
     __pow__: 幂运算
     __author__:__author__代表作者信息
     __slots__:可以使__slots__限制实例的变量,__slots__定义的属性仅对当前类的实例起作用，对继承了它的子类是不起作用的。想想也是这个道理，
               如果你继承一个父类，却莫名其妙发现有些变量无法定义，那不是大问题么？如果非要子类也被限制，除非在子类中也定义__slots__，这样，
               子类实例允许定义的属性就是自身的__slots__加上父类的__slots__。

反射：
    getattr()函数的使用方法：接收2个参数，前面的是一个类或者模块，后面的是一个字符串，注意了！是个字符串！
    hasattr()的内置函数，用法和getattr()基本类似，它可以判断commons中是否具有某个成员，返回True或False。
    delattr()和setattr()就不做多解释，相信从字面意思看，你也该猜到它们的用途和用法了。它们都是对内存中的模块进行操作，并不会对源文件进行修改。
    __import__()默认只会导入最开头的圆点左边的目录,加上fromlist = True参数即可

Python的异常机制具有嵌套处理的能力，比如下面的函数f3()调用f2()，f2()调用f1()，虽然是在f1()出错了，但只需要在f3()进行异常捕获，不需要每一层都捕获异常。


try…except…语句处理异常的工作机制如下：
    1.首先，执行try子句（在关键字try和关键字except之间的语句）
    2.如果没有异常发生，忽略except子句，try子句执行后结束。
    3.如果在执行try子句的过程中发生了异常，那么try子句余下的部分将被忽略。如果异常的类型和 except 之后的名称相符，那么对应的except子句将被执行。
    4.如果程序发生的异常不在你的捕获列表中，那么依然会抛出别的异常。
    5.如果一个异常没有与任何的except匹配，那么这个异常将会传递给上层的try中。也就是前面说的嵌套处理能力。直到程序最顶端如果还没有被捕获，那么将弹出异常。
    6.可能包含多个except子句，分别来处理不同的特定的异常。但最多只有一个分支会被执行。所以except子句有排序先后问题，进了一条巷子就不会进别的巷子。
    7.处理程序将只针对对应的try子句中的异常进行处理，不会处理其他try语句中的异常。
    8.一个except子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组。
    9.最后一个except子句可以忽略异常的名称，它将被当作通配符使用，也就是说匹配所有异常。

try...except...else:
    可选的else子句，如果使用这个子句，那么必须放在所有的except子句之后。
    else子句将在try子句没有发生任何异常的时候执行。

try..except...finally:
    可选的finally子句。无论try执行情况和except异常触发情况，finally子句都会被执行！

常见异常：
    AttributeError 	试图访问一个对象没有的属性
    IOError 	输入/输出异常
    ImportError 	无法引入模块或包；多是路径问题或名称错误
    IndentationError 	缩进错误
    IndexError 	下标索引错误
    KeyError 	试图访问不存在的键
    KeyboardInterrupt 	Ctrl+C被按下，键盘终止输入
    NameError 	使用未定义的变量
    SyntaxError 	语法错误
    TypeError 	传入对象的类型与要求的不符合
    UnboundLocalError 	试图访问一个还未被设置的局部变量
    ValueError 	传入一个调用者不期望的值，即使值的类型是正确的
    OSError 	操作系统执行错误

自定义异常应该继承Exception类，直接继承或者间接继承都可以

常用模块：
    os
