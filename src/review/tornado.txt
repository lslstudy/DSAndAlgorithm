➜  tornado git:(branch5.1) ✗ tree -L 1
.
├── LICENSE         # license说明
├── MANIFEST.in     # 打包配置文件
├── README.rst      # 自述文件
├── .travis.yml     # Travis CI的配置文件
├── appveyor.yml    # AppVeyor 持续集成的托管平台配置
├── codecov.yml     # Codecov代码覆盖率配置
├── demos           # 使用示例
├── docs            # 文档目录
├── maint           # 开发中使用的工具和脚本
├── runtests.sh     # 测试入口脚本
├── setup.cfg       # 构建bdist_wheel时参数
├── setup.py        # 安装入口
├── tornado         # 源码文件
└── tox.ini         # tox的配置文件，目的是自动化和标准化 Python 的测试工作

4 directories, 10 files
➜  tornado git:(branch5.1) ✗ tree tornado -L 1
tornado
├── __init__.py         # 版本信息
├── _locale_data.py     # 语言映射关系数据
├── auth.py             # 使用OpenId和OAuth进行第三方登录
├── autoreload.py       # 生产环境中自动检查代码更新
├── concurrent.py       # concurrent线程/进程池三方库
├── curl_httpclient.py  # 使用pycurl的非阻塞HTTP客户机实现
├── escape.py           # HTML,JSON,URLs等的编码解码和一些字符串操作
├── gen.py              # 一个基于生成器的接口，使用该模块保证代码异步运行
├── http1connection.py  # HTTP/1.x的客户端和服务器实现。
├── httpclient.py       # 一个无阻塞的HTTP服务器实现
├── httpserver.py       # 一个无阻塞的HTTP服务器实现
├── httputil.py         # 分析HTTP请求内容
├── ioloop.py           # 核心的I/O循环
├── iostream.py         # 对非阻塞式的 socket 的简单封装，以方便常用读写操作
├── locale.py           # 国际化支持
├── locks.py            # 自定义的锁模块
├── log.py              # 日志记录模块
├── netutil.py          # 一些网络应用的实现，主要实现TCPServer类
├── options.py          # 解析终端参数
├── platform            # 在Tornado上运行为Twisted实现的代码
├── process.py          # 多进程实现的封装
├── queues.py           # 非线程安全的异步队列
├── routing.py          # 路由实现
├── simple_httpclient.py# 非阻塞的http客户端
├── speedups.c          # 加速器，C代码
├── speedups.pyi        # 加速器，由speedups.c转换而来
├── stack_context.py    # 用于异步环境中对回调函数的上下文保存、异常处理
├── tcpclient.py        # 一个非阻塞，单线程TCP客户端
├── tcpserver.py        # 一个非阻塞，单线程TCP服务器
├── template.py         # 模版系统
├── test                # 单元测试，测试框架为unittest
├── testing.py          # 支持自动化测试的类
├── util.py             # 工具函数
├── web.py              # 包含web框架的大部分主要功能，包含RequestHandler和Application两个重要的类
├── websocket.py        # 实现和浏览器的双向通信
└── wsgi.py             # 与其他python网络框架/服务器的相互操作


同步和异步针对应用程序来，关注的是消息通信机制，程序中间的协作关系。
 1.同步:执行一个操作之后，等待结果，然后才继续执行后续的操作。同步需要主动读写数据，在读写数据过程中还是会阻塞。

 2.异步:执行一个操作后，可以去执行其他的操作，然后等待通知再回来执行刚才没执行完的操作。由操作系统内核完成数据的读写。

阻塞/非阻塞:
    阻塞与非阻塞更关注的是单个进程的执行状态。进程/线程访问的数据是否就绪，进程/线程是否需要等待。

1.阻塞:进程给CPU传达一个任务之后，一直等待CPU处理完成，然后才执行后面的操作。

2.非阻塞:进程给CPU传达任我后，继续处理后续的操作，隔断时间再来询问之前的操作是否完成。这样的过程其实也叫轮询。

------------------------------缓存IO---------------------------------------
缓存IO:也被称为标准IO，大多数文件系统默认IO操作都是缓存IO，在Linux的缓存IO机制中，操作系统会将IO的数据缓存在文件系统的页缓存（page cache）中，也就是说，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。
IO -> 文件系统的页缓存page cache(操作系统的内核缓冲区) -> 应用程序的地址空间
缺点：数据在传输过程中需要在应用程序地址空间和内核进行多次数据拷贝操作，这些数据拷贝操作所带来的CPU以及内存开销是非常大的

-------------------------------阻塞式IO--------------------------------------

耗时型任务一般分为两类：CPU耗时型任务和IO耗时型任务。CPU指一般的代码运算执行过程，IO一般分为两大类，计算型IO和阻塞式IO。如果仅有一个线程，那么同一时刻只能有一个任务在计算，但如果是阻塞式IO，它可以让它先阻塞掉，然后去计算其他的任务，等到内核告诉程序那边没有被阻塞了就、再回到之前的地方进行之后的运算。

linux下，可以通过设置socket使其变为non-blocking。nonblocking IO的特点是用户进程需要不断的主动询问kernel数据好了没有。


----------------------------tornado异步原理------------------------------
tornado的异步实现是将当前的请求暂停，等待其返回结果，不继续往下执行，但是如果有其他请求(同样是一个协程)，只要不也是阻塞式IO，那么就会直接去处理其他的请求了。


select、poll、epoll的区别

select
select目前几乎在所有的平台上支持，其良好跨平台支持也是它的一个优点。
select的一个缺点在于单个进程能够监视的文件描述符的数量存在最大限制，在Linux上一般为1024，
可以通过修改宏定义甚至重新编译内核的方式提升这一限制，但是这样也会造成效率的降低。
缺点：
    每次调用select都需要把文件描述符（FD）从用户态拷贝到内核，开销比较大
    每次都需要在内核遍历传入的文件描述符（FD）
    select支持文件数量比较小，默认是1024。当然，也可以通过修改宏定义改掉，但这会造成效率的降低。

poll
poll及轮训，poll和select本质上是一样的，只是描述fd集合的方式不同。poll使用的是pollfd结构，
select使用的是fd_set结构。

epoll
epoll是对select和poll的改进，而且改正了select、poll的三个缺点和不足。
相对于select和poll来说，epoll更加灵活，没有描述符限制。epoll使用一个文件描述符管理多个描述符，
将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次。
优点：
    每次注册新事件到epoll句柄都会把所有的fd拷贝进来，而不是在epoll_wait中重复拷贝，这样确保fd只会被拷贝一次
    epoll不是像select/poll那样每次都把fd加入等待队列，epoll把每个fd指定一个回调函数，
    当设备就绪时，唤醒等待队列的等待者就会调用其它的回调函数，这个回调函数会把就绪的fd放入一个就绪链表。
    epoll_wait就是在这个就绪链表中查看有没有就绪fd。epoll没有fd数目限制
缺点：
    如果没有大量的idle-connection或者dead-connection，
    epoll的效率并不会比select/poll高很多，但是当遇到大量的idle-connection，
    就会发现epoll的效率大大高于select/poll。



select，poll实现需要自己不断轮询所有fd集合，直到设备就绪，期间可能要睡眠和唤醒多次交替。
而epoll其实也需要调用 epoll_wait不断轮询就绪链表，期间也可能多次睡眠和唤醒交替，
但是它是设备就绪时，调用回调函数，把就绪fd放入就绪链表中，并唤醒在 epoll_wait中进入睡眠的进程。
虽然都要睡眠和交替，但是select和poll在“醒着”的时候要遍历整个fd集合，
而epoll在“醒着”的 时候只要判断一下就绪链表是否为空就行了，这节省了大量的CPU时间。这就是回调机制带来的性能提升。
select，poll每次调用都要把fd集合从用户态往内核态拷贝一次，并且要把current往设备等待队列中挂一次，
而epoll只要 一次拷贝，而且把current往等待队列上挂也只挂一次（在epoll_wait的开始，
注意这里的等待队列并不是设备等待队列，只是一个epoll内 部定义的等待队列）。这也能节省不少的开销。

tornado.utils.Configurable: 配置类，是工厂模式的实现，通过使用构造函数（new()）作为工厂方法。
其子类必须实现configurable_base()、configurable_default()、initialize()。
通过调用configure()函数去配置当基类（不是指Configurable，而是继承至Configurable的类，
如tornado.ioloop.IOLoop）被实例化时使用的实现类，以及配置其实现类初始化的关键字参数。

tornado 内部状态吗：
    404:    请求路径无法匹配任何requesthandler类对应的模式返回404
    400:    没有传递需要给的的参数返回400
    405:    没有定义的方法,请求的方法不对 NOT ALLOWED METHOD
    500:    遇到任何不能让其退出的错误或者代码里面没有捕捉的异常返回500
    200:    成功响应请求的标志.

重写错误信息：重写RequestHandler中的write_error方法
    def write_error(self. status_code, **kwargs):
        pass

tornado 异步

tornado.httpclient.HTTPClient

@tornado.web.asynchronous
tornado.httpclient.AsyncHTTPClient() -> fetch(callback=self.method_name)

异步装饰器和finish方法
@tornado.web.asynchronous 作用：tornado默认在函数返回时关闭客户端的连接，但是在处理回调函数的异步请求时，需要保持开启状态直到回调函数执行完毕，作用就是保持客户端的连接状态，将请求变为长连接的方式。

finish方法作用: 在使用@tornado.web.asynchornous装饰器时，tornado不会关闭客户端的连接，一直处于pending状态，必须显示调用finish方法告诉tornado关闭连接.

异步生成器(tornado.gen模块):
     example:

     @tornado.web.asynchronous
     @tornado.gen.engine
     def get(self):
        client = tornado.httpclient.AsyncHTTPClient()
        response = yield tornado.gen.Task(client.fetch, urls+params)
        ...
        self.write("xxx")
        self.finish()

python 4.3以后使用async 和await 代替tornado.gen.coroutine yield

tornado ioloop 和 iostream
    ioloop.py: 主要的是将底层的epoll或者说是其他的IO多路复用封装作异步事件来处理。
    iostream.py: 主要是对于下层的异步事件的进一步封装，为其封装了更上一层的buffer（IO）事件。


